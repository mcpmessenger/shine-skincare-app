container_commands:
  01_create_credentials_file:
    command: |
      # Create Google Cloud credentials file from environment variable
      if [ ! -z "$GOOGLE_CREDENTIALS_JSON" ]; then
        echo "$GOOGLE_CREDENTIALS_JSON" > /var/app/current/google-credentials.json
        chmod 600 /var/app/current/google-credentials.json
        chown webapp:webapp /var/app/current/google-credentials.json
      fi
    ignoreErrors: true
    
  02_setup_aws_credentials:
    command: |
      # Ensure AWS credentials are available for Parameter Store access
      mkdir -p /home/webapp/.aws
      if [ ! -z "$AWS_DEFAULT_REGION" ]; then
        echo "[default]" > /home/webapp/.aws/config
        echo "region = $AWS_DEFAULT_REGION" >> /home/webapp/.aws/config
        chown -R webapp:webapp /home/webapp/.aws
      fi
    ignoreErrors: true
    
  03_create_parameter_store_script:
    command: |
      # Create script to fetch parameters from AWS Systems Manager
      cat > /var/app/current/fetch_parameters.py << 'EOF'
      import boto3
      import os
      import json
      
      def fetch_parameter(param_name, decrypt=True):
          try:
              ssm = boto3.client('ssm', region_name=os.environ.get('AWS_DEFAULT_REGION', 'us-east-1'))
              response = ssm.get_parameter(Name=param_name, WithDecryption=decrypt)
              return response['Parameter']['Value']
          except Exception as e:
              print(f"Error fetching parameter {param_name}: {e}")
              return None
      
      def setup_environment():
          # Fetch parameters and set environment variables
          params = {
              'SECRET_KEY': os.environ.get('SECRET_KEY_PARAM'),
              'SUPABASE_URL': os.environ.get('SUPABASE_URL_PARAM'),
              'SUPABASE_KEY': os.environ.get('SUPABASE_KEY_PARAM'),
          }
          
          for env_var, param_name in params.items():
              if param_name:
                  value = fetch_parameter(param_name)
                  if value:
                      os.environ[env_var] = value
      
      if __name__ == "__main__":
          setup_environment()
      EOF
      chmod +x /var/app/current/fetch_parameters.py
      chown webapp:webapp /var/app/current/fetch_parameters.py
    ignoreErrors: true

files:
  "/opt/elasticbeanstalk/hooks/appdeploy/pre/01_setup_credentials.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      # Pre-deployment credential setup
      
      # Set up Google Cloud credentials if provided
      if [ ! -z "$GOOGLE_CREDENTIALS_JSON" ]; then
        echo "Setting up Google Cloud credentials..."
        echo "$GOOGLE_CREDENTIALS_JSON" > /var/app/current/google-credentials.json
        chmod 600 /var/app/current/google-credentials.json
        chown webapp:webapp /var/app/current/google-credentials.json
      fi
      
      # Validate credentials
      if [ -f "/var/app/current/google-credentials.json" ]; then
        echo "Google Cloud credentials file created successfully"
      else
        echo "Warning: Google Cloud credentials not found"
      fi
      
  "/opt/elasticbeanstalk/hooks/appdeploy/post/01_validate_credentials.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      # Post-deployment credential validation
      
      echo "Validating deployment credentials..." >> /var/log/eb-activity.log
      
      # Check Google Cloud credentials
      if [ -f "/var/app/current/google-credentials.json" ]; then
        echo "✓ Google Cloud credentials file exists" >> /var/log/eb-activity.log
      else
        echo "✗ Google Cloud credentials file missing" >> /var/log/eb-activity.log
      fi
      
      # Check application directories
      if [ -d "/var/app/current/faiss_data" ]; then
        echo "✓ FAISS data directory exists" >> /var/log/eb-activity.log
      else
        echo "✗ FAISS data directory missing" >> /var/log/eb-activity.log
      fi
      
      if [ -d "/var/app/current/logs" ]; then
        echo "✓ Logs directory exists" >> /var/log/eb-activity.log
      else
        echo "✗ Logs directory missing" >> /var/log/eb-activity.log
      fi
      
      # Test basic application health
      sleep 10  # Give app time to start
      if curl -f http://localhost:5000/api/health > /dev/null 2>&1; then
        echo "✓ Application health check passed" >> /var/log/eb-activity.log
      else
        echo "✗ Application health check failed" >> /var/log/eb-activity.log
      fi