# Use official Python runtime with ML optimizations
FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Install system dependencies for ML libraries
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    make \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libgtk-3-0 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements first for better caching
COPY requirements_full_ml.txt .

# Install Python dependencies with fallback
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir flask flask-cors && \
    pip install --no-cache-dir -r requirements_full_ml.txt || \
    echo "⚠️ Some ML dependencies failed to install - will run in basic mode"

# Copy application code
COPY . .

# Create directory for models (will be downloaded from S3)
RUN mkdir -p models

# Expose port
EXPOSE 5000

# Set environment variables
ENV FLASK_APP=hybrid_ml_service.py
ENV FLASK_ENV=production
ENV PYTHONPATH=/app
ENV ML_MODE=hybrid

# Health check with longer start period
HEALTHCHECK --interval=30s --timeout=30s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# Run the hybrid service
CMD ["python", "hybrid_ml_service.py"]
