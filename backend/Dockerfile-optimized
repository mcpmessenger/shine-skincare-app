# üèóÔ∏è PHASE 3: OPTIMIZED ML FOUNDATION DOCKERFILE
# Multi-stage build for maximum performance and minimal size

# Stage 1: Build dependencies
FROM python:3.11-slim as builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    make \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libgtk-3-0 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Upgrade pip and install wheel for better dependency resolution
RUN pip install --no-cache-dir --upgrade pip wheel setuptools

# Copy and install requirements with exact pinning
COPY requirements_full_ml.txt .
RUN pip install --no-cache-dir -r requirements_full_ml.txt

# Stage 2: Runtime image
FROM python:3.11-slim as runtime

# Install only runtime system dependencies
RUN apt-get update && apt-get install -y \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender1 \
    libgomp1 \
    libgtk-3-0 \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Set working directory
WORKDIR /app

# Copy application code
COPY . .

# Create directory for models
RUN mkdir -p models

# Expose port
EXPOSE 5000

# Set environment variables for optimization
ENV FLASK_APP=hybrid_ml_service.py
ENV FLASK_ENV=production
ENV PYTHONPATH=/app
ENV ML_MODE=optimized
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV TF_CPP_MIN_LOG_LEVEL=2
ENV OPENCV_IO_MAX_IMAGE_PIXELS=2147483647

# Health check with optimized timing
HEALTHCHECK --interval=30s --timeout=15s --start-period=45s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# Run the optimized hybrid service
CMD ["python", "-u", "hybrid_ml_service.py"]
