# Enhanced Shine App Backend Environment Configuration
# Copy this file to .env and fill in your actual values

# =============================================================================
# EXISTING CONFIGURATION
# =============================================================================

# Flask Configuration
SECRET_KEY=your-secret-key-here
JWT_SECRET_KEY=your-jwt-secret-key-here

# Database Configuration
DATABASE_URL=postgresql://username:password@localhost:5432/shine_db
DEV_DATABASE_URL=sqlite:///shine_dev.db
TEST_DATABASE_URL=sqlite:///shine_test.db

# Redis Configuration
REDIS_URL=redis://localhost:6379/0
CELERY_BROKER_URL=redis://localhost:6379/1
CELERY_RESULT_BACKEND=redis://localhost:6379/1

# Stripe Configuration
STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key
STRIPE_PUBLISHABLE_KEY=pk_test_your_stripe_publishable_key

# Google OAuth Configuration
GOOGLE_CLIENT_ID=your-google-client-id
GOOGLE_CLIENT_SECRET=your-google-client-secret

# MCP Configuration
MCP_SERVER_URL=your-mcp-server-url
MCP_API_KEY=your-mcp-api-key

# =============================================================================
# NEW ENHANCED FEATURES CONFIGURATION
# =============================================================================

# Google Cloud Vision AI Configuration
# Get these from Google Cloud Console: https://console.cloud.google.com/
GOOGLE_CLOUD_PROJECT_ID=your-google-cloud-project-id
GOOGLE_APPLICATION_CREDENTIALS=/path/to/your/service-account-key.json

# Supabase Configuration
# Get these from your Supabase project dashboard
SUPABASE_URL=https://your-project-id.supabase.co
SUPABASE_KEY=your-supabase-service-role-key
SUPABASE_ANON_KEY=your-supabase-anon-key

# FAISS Configuration
FAISS_INDEX_PATH=faiss_index
FAISS_DIMENSION=2048

# =============================================================================
# SETUP INSTRUCTIONS
# =============================================================================

# 1. Google Cloud Vision AI Setup:
#    - Go to https://console.cloud.google.com/
#    - Create a new project or select existing one
#    - Enable the Cloud Vision API
#    - Create a service account and download the JSON key file
#    - Set GOOGLE_APPLICATION_CREDENTIALS to the path of your JSON key file

# 2. Supabase Setup:
#    - Go to https://supabase.com/
#    - Create a new project
#    - Go to Settings > API to get your URL and keys
#    - Create a storage bucket named 'images' for image uploads
#    - Run the database migrations to create the required tables

# 3. Database Tables (Run these SQL commands in Supabase):
#    CREATE TABLE images (
#        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
#        user_id UUID NOT NULL,
#        image_url TEXT NOT NULL,
#        faiss_index_id INTEGER,
#        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
#    );
#
#    CREATE TABLE analyses (
#        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
#        image_id UUID REFERENCES images(id) ON DELETE CASCADE,
#        google_vision_result JSONB,
#        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
#    );
#
#    CREATE TABLE image_vectors (
#        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
#        image_id UUID REFERENCES images(id) ON DELETE CASCADE,
#        vector_data JSONB NOT NULL,
#        vector_dimension INTEGER NOT NULL,
#        model_name TEXT NOT NULL,
#        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
#    );

# 4. Storage Bucket Setup:
#    - In Supabase dashboard, go to Storage
#    - Create a bucket named 'images'
#    - Set it to public for image access
#    - Configure RLS policies as needed

# =============================================================================
# OPTIONAL CONFIGURATION
# =============================================================================

# Model Configuration (for image vectorization)
VECTORIZATION_MODEL=resnet50
VECTORIZATION_DEVICE=cpu  # or 'cuda' if you have GPU

# Logging Configuration
LOG_LEVEL=INFO

# File Upload Configuration
MAX_CONTENT_LENGTH=16777216  # 16MB in bytes 